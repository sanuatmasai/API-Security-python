# ==============================================================================
# FINAL PROJECT STRUCTURE
# ==============================================================================
# /
# ├── app/
# │   ├── __init__.py
# │   ├── auth/
# │   │   ├── __init__.py
# │   │   ├── blocklist.py  # <-- NEW: Handles revoked tokens for logout
# │   │   ├── routes.py
# │   │   └── utils.py
# │   ├── users/
# │   │   ├── __init__.py
# │   │   └── routes.py
# │   ├── health/
# │   │   ├── __init__.py
# │   │   └── routes.py     # <-- NEW: For the health check endpoint
# │   ├── config.py         # <-- NEW: Manages all settings/secrets
# │   ├── database.py
# │   ├── main.py
# │   ├── models.py
# │   └── schemas.py
# ├── .env                  # <-- NEW: Stores environment variables
# └── requirements.txt      # <-- NEW: Lists project dependencies
#
# Note: The __init__.py files are empty and are used to mark directories
# as Python packages.

# ==============================================================================
# FILE: requirements.txt
# ==============================================================================
# fastapi
# uvicorn
# sqlalchemy
# pydantic
# pydantic-settings
# passlib[bcrypt]
# python-jose[cryptography]
# python-multipart # Needed for OAuth2PasswordRequestForm
# itsdangerous # For secure password reset tokens
# email-validator # For Pydantic's EmailStr validation
#
# To install all dependencies:
# pip install -r requirements.txt

# ==============================================================================
# FILE: .env
# ==============================================================================
# This file stores secrets and configuration.
# It should be added to .gitignore and NEVER committed to version control.

# A strong, randomly generated secret key for signing JWTs
# You can generate one using: openssl rand -hex 32
SECRET_KEY="a_very_strong_and_long_random_secret_string_for_jwt"

# A separate secret for signing password reset tokens
PASSWORD_RESET_TOKEN_SECRET="another_super_secret_string_for_password_resets"

# ==============================================================================
# FILE: app/config.py
# ==============================================================================
# Purpose: Centralized application configuration management.
# Using Pydantic's BaseSettings allows us to load config from environment
# variables (from the .env file) and provides type validation.

from pydantic_settings import BaseSettings
import os

# Get the directory of the current file to build the path to .env
# This makes the path relative to this config file, which is robust.
env_path = os.path.join(os.path.dirname(__file__), '..', '.env')

class Settings(BaseSettings):
    """
    Settings class to hold all application configurations.
    It automatically reads from environment variables or a .env file.
    """
    # --- JWT Settings ---
    # The secret key used to sign the JWTs. It's crucial this remains secret.
    SECRET_KEY: str
    # The algorithm used for JWT encoding. HS256 is a common choice.
    ALGORITHM: str = "HS256"
    # Defines how long the access token is valid for, in minutes.
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    # Defines how long the refresh token is valid for, in days.
    REFRESH_TOKEN_EXPIRE_DAYS: int = 7

    # --- Password Reset Settings ---
    # A separate secret key for generating password reset tokens.
    # Using a different key improves security.
    PASSWORD_RESET_TOKEN_SECRET: str
    # How long the password reset link is valid for.
    PASSWORD_RESET_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        # Specifies the .env file to load the environment variables from.
        env_file = env_path

# Create a single, importable instance of the settings.
# This pattern ensures settings are loaded only once.
settings = Settings()


# ==============================================================================
# FILE: app/database.py
# ==============================================================================
# Purpose: Database connection and session management.
# This setup is standard for using SQLAlchemy with FastAPI.

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

# The URL for our SQLite database file.
SQLALCHEMY_DATABASE_URL = "sqlite:///./secure_app.db"

# The SQLAlchemy engine is the entry point to the database.
# `connect_args` is needed only for SQLite to allow multi-threaded access.
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)

# A SessionLocal class is a factory for creating new database sessions.
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base class for our SQLAlchemy models to inherit from.
Base = declarative_base()

def get_db():
    """
    FastAPI dependency to get a database session.
    It ensures that the database session is always closed after the request.
    This is a crucial pattern for managing database connections.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# ==============================================================================
# FILE: app/models.py
# ==============================================================================
# Purpose: Defines the SQLAlchemy ORM models, which represent database tables.

from sqlalchemy import Column, String
from .database import Base

class User(Base):
    """
    User model representing the 'users' table in the database.
    """
    __tablename__ = "users"

    # Columns for the 'users' table
    id = Column(String, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    password_hash = Column(String)
    role = Column(String, default="user") # e.g., 'user' or 'admin'


# ==============================================================================
# FILE: app/schemas.py
# ==============================================================================
# Purpose: Defines Pydantic models for data validation and serialization.
# These models define the expected shape of API request and response bodies.

from pydantic import BaseModel, EmailStr, validator
import re

# --- User Schemas ---
class UserBase(BaseModel):
    """Base schema for user, includes common fields."""
    username: str
    email: EmailStr # Pydantic automatically validates this is a valid email format.

class UserCreate(UserBase):
    """Schema for creating a new user. Includes password."""
    password: str

    @validator("username")
    def validate_username(cls, v):
        """
        Input Sanitization: Ensures username is alphanumeric and strips whitespace.
        This prevents certain types of injection attacks and keeps data clean.
        """
        if not v.isalnum():
            raise ValueError("Username must be alphanumeric.")
        return v.strip()

    @validator("password")
    def validate_password_strength(cls, v):
        """
        Input Validation: Enforces password strength requirements.
        This is a critical security measure to prevent weak passwords.
        """
        if len(v) < 8:
            raise ValueError("Password must be at least 8 characters long.")
        if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", v):
            raise ValueError("Password must contain at least one special character.")
        return v

class UserOut(UserBase):
    """Schema for user data returned by the API. Excludes password."""
    id: str
    role: str

    class Config:
        # This allows Pydantic to work with SQLAlchemy ORM objects.
        from_attributes = True

# --- Token Schemas ---
class Token(BaseModel):
    """Schema for the JWT access and refresh tokens."""
    access_token: str
    refresh_token: str
    token_type: str = "bearer"

class TokenData(BaseModel):
    """Schema for the data encoded within the JWT."""
    user_id: str | None = None

# --- Admin Schemas ---
class RoleUpdate(BaseModel):
    """Schema for updating a user's role (admin only)."""
    role: str

    @validator('role')
    def validate_role(cls, v):
        """Ensures the role is one of the allowed values."""
        if v not in ['user', 'admin']:
            raise ValueError('Role must be either "user" or "admin"')
        return v

# --- Password Reset Schemas ---
class PasswordResetRequest(BaseModel):
    """Schema for the password reset request email."""
    email: EmailStr

class PasswordReset(BaseModel):
    """Schema for resetting the password with a token."""
    token: str
    new_password: str

# ==============================================================================
# FILE: app/auth/blocklist.py
# ==============================================================================
# Purpose: Manages a blocklist for revoked JWTs to handle logouts.
# In a real production environment, this should be implemented using a
# persistent, fast-access database like Redis, not an in-memory set.

# A simple in-memory set to store the JTI (JWT ID) of revoked tokens.
BLOCKLIST = set()

def add_to_blocklist(jti: str):
    """Adds a token's JTI to the blocklist."""
    BLOCKLIST.add(jti)

def is_blocklisted(jti: str) -> bool:
    """Checks if a token's JTI is in the blocklist."""
    return jti in BLOCKLIST


# ==============================================================================
# FILE: app/auth/utils.py
# ==============================================================================
# Purpose: Contains utility functions for authentication and security.

from datetime import datetime, timedelta, timezone
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from jose import JWTError, jwt
from itsdangerous import URLSafeTimedSerializer
from fastapi import HTTPException, status, Depends

from app.models import User
from app.schemas import TokenData
from app.config import settings
from app.database import get_db
from app.auth.blocklist import is_blocklisted
import uuid

# --- Password Hashing ---
# `pwd_context` is used for hashing and verifying passwords.
# "bcrypt" is the chosen hashing algorithm, which is a strong standard.
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    """Hashes a plain-text password using bcrypt."""
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verifies a plain-text password against a hashed one."""
    return pwd_context.verify(plain_password, hashed_password)

# --- JWT Token Creation ---
def create_access_token(data: dict):
    """Creates a new JWT access token."""
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({
        "exp": expire,
        "jti": str(uuid.uuid4()) # 'jti' (JWT ID) is a unique identifier for the token
    })
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)

def create_refresh_token(data: dict):
    """Creates a new JWT refresh token."""
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)

# --- Password Reset Token ---
# Uses itsdangerous for generating secure, timed tokens for password resets.
password_reset_serializer = URLSafeTimedSerializer(settings.PASSWORD_RESET_TOKEN_SECRET)

def generate_password_reset_token(email: str) -> str:
    """Generates a timed, secure token for password reset."""
    return password_reset_serializer.dumps(email, salt='password-reset-salt')

def verify_password_reset_token(token: str) -> str | None:
    """Verifies the password reset token and returns the email if valid."""
    try:
        # The max_age parameter checks the token's expiration.
        email = password_reset_serializer.loads(
            token,
            salt='password-reset-salt',
            max_age=settings.PASSWORD_RESET_TOKEN_EXPIRE_MINUTES * 60
        )
        return email
    except Exception:
        # If token is invalid, expired, or tampered with, it will raise an exception.
        return None

# --- User Retrieval ---
def get_user_by_email(db: Session, email: str):
    """Fetches a user from the database by their email."""
    return db.query(User).filter(User.email == email).first()

def get_user_by_id(db: Session, user_id: str):
    """Fetches a user from the database by their ID."""
    return db.query(User).filter(User.id == user_id).first()

# --- Token Decoding and User Validation ---
def get_current_user(token: str, db: Session = Depends(get_db)):
    """
    Decodes the JWT, validates it, and returns the current user.
    This is a dependency used to protect endpoints.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id: str = payload.get("sub")
        jti: str = payload.get("jti")

        if user_id is None:
            raise credentials_exception
        if jti is None or is_blocklisted(jti):
            # Check if the token has been revoked (logged out).
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token has been revoked")

        token_data = TokenData(user_id=user_id)
    except JWTError:
        raise credentials_exception

    user = get_user_by_id(db, user_id=token_data.user_id)
    if user is None:
        raise credentials_exception
    return user


# ==============================================================================
# FILE: app/auth/routes.py
# ==============================================================================
# Purpose: Defines all authentication-related API endpoints.

from fastapi import APIRouter, Depends, HTTPException, status, Response
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from uuid import uuid4

from app import schemas, models
from app.database import get_db
from app.auth.utils import (
    hash_password, verify_password, create_access_token, create_refresh_token,
    get_user_by_email, get_current_user, generate_password_reset_token,
    verify_password_reset_token
)
from app.auth.blocklist import add_to_blocklist
from jose import jwt
from app.config import settings


# --- Router and Security Scheme Setup ---
router = APIRouter(tags=["Authentication"])

# This tells FastAPI where the token-issuing endpoint is.
# It's used for OpenAPI/Swagger UI documentation.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")


# --- Core Authentication Endpoints ---

@router.post("/register", response_model=schemas.UserOut, status_code=status.HTTP_201_CREATED)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    Endpoint for new user registration.
    - Validates that the email is not already in use.
    - Hashes the password before storing it.
    - Creates and saves the new user to the database.
    """
    if get_user_by_email(db, user.email):
        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Email already registered")

    hashed_pw = hash_password(user.password)
    new_user = models.User(id=str(uuid4()), username=user.username, email=user.email, password_hash=hashed_pw)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

@router.post("/login", response_model=schemas.Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    """
    Endpoint for user login.
    - Uses OAuth2PasswordRequestForm, which expects 'username' and 'password' fields.
    - Verifies email and password.
    - Returns a new access token and refresh token upon success.
    """
    # Note: OAuth2PasswordRequestForm uses 'username' field for email here.
    user = get_user_by_email(db, form_data.username)
    if not user or not verify_password(form_data.password, user.password_hash):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")

    # Data to be encoded in the tokens
    token_data = {"sub": user.id, "role": user.role}
    access_token = create_access_token(token_data)
    refresh_token = create_refresh_token(token_data)

    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "bearer"}

@router.post("/logout", status_code=status.HTTP_204_NO_CONTENT)
def logout(token: str = Depends(oauth2_scheme)):
    """
    Endpoint for user logout.
    - Invalidates the current access token by adding its JTI to the blocklist.
    """
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        jti = payload.get("jti")
        if jti:
            add_to_blocklist(jti)
        return Response(status_code=status.HTTP_204_NO_CONTENT)
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token for logout")

@router.post("/refresh", response_model=schemas.Token)
def refresh_token(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    """
    Endpoint to get a new access token using a refresh token.
    Note: For simplicity, we are re-using oauth2_scheme. In a real app, you might
    have a separate dependency for refresh tokens.
    """
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token")

        user = get_user_by_email(db, user_id)
        if user is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")

        # Create new tokens
        token_data = {"sub": user.id, "role": user.role}
        new_access_token = create_access_token(token_data)
        new_refresh_token = create_refresh_token(token_data) # Optionally, issue a new refresh token

        return {"access_token": new_access_token, "refresh_token": new_refresh_token, "token_type": "bearer"}

    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token")

@router.get("/me", response_model=schemas.UserOut)
def get_me(current_user: models.User = Depends(get_current_user)):
    """
    Endpoint to get the details of the currently authenticated user.
    The `get_current_user` dependency handles all the validation.
    """
    return current_user

# --- Password Management Endpoints ---

@router.post("/forgot-password", status_code=status.HTTP_200_OK)
def forgot_password(request: schemas.PasswordResetRequest, db: Session = Depends(get_db)):
    """
    Endpoint to request a password reset.
    - Finds the user by email.
    - Generates a secure token.
    - Simulates sending an email with the reset link.
    - IMPORTANT: Always returns a generic success message to prevent email enumeration attacks.
    """
    user = get_user_by_email(db, email=request.email)
    if user:
        reset_token = generate_password_reset_token(email=request.email)
        # In a real app, you would send this token via email.
        # For this example, we'll just print it.
        print(f"Password reset token for {request.email}: {reset_token}")

    return {"message": "If an account with that email exists, a password reset link has been sent."}

@router.post("/reset-password", status_code=status.HTTP_200_OK)
def reset_password(request: schemas.PasswordReset, db: Session = Depends(get_db)):
    """
    Endpoint to reset the password using the token from the email.
    """
    email = verify_password_reset_token(token=request.token)
    if not email:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid or expired token")

    user = get_user_by_email(db, email=email)
    if not user:
        # This case should be rare if the token is valid, but it's good practice to check.
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

    # Validate the new password using the same rules as registration
    try:
        schemas.UserCreate.validate_password_strength(request.new_password)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))

    user.password_hash = hash_password(request.new_password)
    db.commit()

    return {"message": "Password has been reset successfully."}


# ==============================================================================
# FILE: app/users/routes.py
# ==============================================================================
# Purpose: Defines endpoints for user management (admin-only).

from fastapi import APIRouter, Depends, HTTPException, status
from typing import List
from sqlalchemy.orm import Session

from app import models, schemas
from app.database import get_db
from app.auth.utils import get_current_user, get_user_by_id

router = APIRouter(prefix="/users", tags=["Users"])

def get_current_admin_user(current_user: models.User = Depends(get_current_user)):
    """
    A dependency that checks if the current user is an admin.
    This protects admin-only endpoints.
    """
    if current_user.role != "admin":
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Admin access required")
    return current_user

@router.get("/", response_model=List[schemas.UserOut], dependencies=[Depends(get_current_admin_user)])
def list_users(db: Session = Depends(get_db)):
    """Lists all users. (Admin only)"""
    return db.query(models.User).all()

@router.put("/{user_id}/role", response_model=schemas.UserOut, dependencies=[Depends(get_current_admin_user)])
def update_user_role(user_id: str, data: schemas.RoleUpdate, db: Session = Depends(get_db)):
    """Updates a user's role. (Admin only)"""
    user = get_user_by_id(db, user_id)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    user.role = data.role
    db.commit()
    db.refresh(user)
    return user

@router.delete("/{user_id}", status_code=status.HTTP_204_NO_CONTENT, dependencies=[Depends(get_current_admin_user)])
def delete_user(user_id: str, db: Session = Depends(get_db)):
    """Deletes a user. (Admin only)"""
    user = get_user_by_id(db, user_id)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    db.delete(user)
    db.commit()
    return Response(status_code=status.HTTP_204_NO_CONTENT)


# ==============================================================================
# FILE: app/health/routes.py
# ==============================================================================
# Purpose: A simple health check endpoint.

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.database import get_db

router = APIRouter(prefix="/health", tags=["Health"])

@router.get("/")
def health_check(db: Session = Depends(get_db)):
    """
    A simple health check endpoint.
    - Returns a success message.
    - Tries to connect to the database to ensure it's available.
    """
    try:
        # A simple query to check DB connectivity
        db.execute('SELECT 1')
        return {"status": "healthy", "database": "connected"}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Database connection failed: {e}"
        )


# ==============================================================================
# FILE: app/main.py
# ==============================================================================
# Purpose: The main entry point for the FastAPI application.
# It sets up middleware, exception handlers, and includes all the routers.

from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware

from app.database import engine, Base
from app.auth.routes import router as auth_router
from app.users.routes import router as users_router
from app.health.routes import router as health_router

# --- Application Setup ---

# Create the database tables based on the models if they don't exist.
Base.metadata.create_all(bind=engine)

# Initialize the FastAPI app instance.
app = FastAPI(title="Secure FastAPI Auth System")

# --- Middleware Configuration ---

# 1. CORS (Cross-Origin Resource Sharing) Middleware
# This allows your frontend (e.g., a React app running on localhost:3000)
# to communicate with your backend API.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # In production, restrict this to your frontend's domain.
    allow_credentials=True,
    allow_methods=["*"], # Allows all standard HTTP methods.
    allow_headers=["*"], # Allows all headers.
)

# 2. Security Headers Middleware
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """
    Adds security-related headers to every HTTP response.
    This helps protect against common web vulnerabilities.
    """
    response = await call_next(request)
    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["Content-Security-Policy"] = "default-src 'self'"
    return response

# Note on Rate Limiting:
# Implementing rate limiting requires an external service like Redis.
# The library `fastapi-limiter` is excellent for this. The setup would look
# like this, but requires a running Redis instance.
#
# from fastapi_limiter import FastAPILimiter
# import redis.asyncio as redis
#
# @app.on_event("startup")
# async def startup():
#     redis_conn = redis.from_url("redis://localhost", encoding="utf-8", decode_responses=True)
#     await FastAPILimiter.init(redis_conn)
#
# To apply it, you would add `Depends(RateLimiter(times=X, seconds=Y))` to your routes.
# For simplicity in this self-contained example, we have omitted the live Redis dependency.

# --- Custom Exception Handlers ---

@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    """
    Catches any unhandled exceptions and returns a generic 500 error.
    This prevents leaking sensitive stack traces to the client.
    """
    # In a real app, you would log the full error here.
    print(f"Unhandled error: {exc}")
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "An internal server error occurred."},
    )

# --- API Routers ---
# Include all the different parts of our API.
app.include_router(auth_router, prefix="/auth")
app.include_router(users_router)
app.include_router(health_router)

# --- Root Endpoint ---
@app.get("/", tags=["Root"])
def read_root():
    """A simple root endpoint to confirm the API is running."""
    return {"message": "Welcome to the Secure FastAPI Authentication System!"}

